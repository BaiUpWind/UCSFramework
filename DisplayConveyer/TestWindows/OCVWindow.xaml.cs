using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DisplayConveyer
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class OCVWindow : Window
    {
        public OCVWindow()
        {
            InitializeComponent();
            WindowState = WindowState.Maximized;
            SizeChanged += (s, e) =>
            {
                double nameSize = ((ActualWidth / 12) / 3 * 2) / 2;
                System.Windows.Application.Current.Resources.Remove("NameFontSize");
                System.Windows.Application.Current.Resources.Add("NameFontSize", nameSize);
                double titlesize = ((ActualWidth / 12) / 3 * 2) / 3;
                System.Windows.Application.Current.Resources.Remove("TitleFontSize");
                System.Windows.Application.Current.Resources.Add("TitleFontSize", titlesize);
                double tabsize = ((ActualWidth / 12) / 3 * 2) / 4;
                System.Windows.Application.Current.Resources.Remove("TabFontSize");
                System.Windows.Application.Current.Resources.Add("TabFontSize", tabsize);
                double gridsize = ((ActualWidth / 12) / 3 * 2) / 5 * 1.3;
                System.Windows.Application.Current.Resources.Remove("GridFontSize");
                System.Windows.Application.Current.Resources.Add("GridFontSize", gridsize);
                //计算额外的偏移
                Thickness mg = new Thickness(10, titlesize + 25, 10, 10);
                Application.Current.Resources.Remove("TitleTickness");
                Application.Current.Resources.Add("TitleTickness", mg);
            };

            //测试代码 
            List<TestData> list = new List<TestData>();
            for (int i = 0; i < 10; i++)
            {
                list.Add(new TestData()
                {
                    ChannelNum = (i + 1).ToString(),
                    BatteryCode = Guid.NewGuid().ToString(),
                    Voltage = 0,
                    Resistance = 0,
                    Temperature = "24",
                    TestTime = DateTime.Now.ToString(),
                    Result = "OK"
                });
            }
            dgv.ItemsSource = list;
            dgv.AutoGeneratedColumns += (s, e) =>
            {
                dgv.Columns[0].Width = 100;
                dgv.Columns[1].Width = 300;
                dgv.Columns[2].Width = 100;
                dgv.Columns[3].Width = 100;
                dgv.Columns[4].Width = 100;
                dgv.Columns[5].Width = 200;
                dgv.Columns[6].Width = 100;
            };
         
        }

        public class TestData
        { 
            public string ChannelNum { get; set; }//通道 
            public string BatteryCode { get; set; }//电芯条码  
            public float  Voltage { get; set; }//电压 
            public float  Resistance { get; set; }//内阻   
            public string Temperature { get; set; } //温度 
            public string TestTime { get; set; }//时间
        
            public string Result { get; set; }//结果
        }

        private void Btn_Maxed(object sender, RoutedEventArgs e)
        {
            if(WindowState == WindowState.Normal)
            {
                WindowState = WindowState.Maximized;
            }
            else
            {
                WindowState = WindowState.Normal;
            }
        }
    }
}
